cmake_minimum_required (VERSION 2.6)
project (FreeOpcUa)

option(CLANG "Build using Clang++" ON)

option(BUILD_PYTHON "Build Python bindings" ON)
option(BUILD_PROTOCOL "Build Mappings" ON)
option(BUILD_CORE "Build Core" ON)
option(BUILD_CLIENT "Build Client" ON)
option(BUILD_SERVER "Build Server" ON)
option(BUILD_TESTS "Build Tests Target" OFF)
option(BUILD_ADDON "Build addon infrasttructure" ON)
set(BUILD_SHARED_LIBS "ON")

#we can override options using variables
#set(BUILD_PYTHON ON)
#set(BUILD_PROTOCOL ON)
#set(BUILD_CORE ON)
#set(BUILD_CLIENT ON)
#set(BUILD_SERVER ON)
#set(BUILD_TESTS  OFF)


if(NOT WIN32)
    set(CMAKE_CXX_FLAGS "-std=c++0x -ggdb -fPIC -Wall ${CMAKE_CXX_FLAGS_DEBUG} " ) 
    if(CLANG)
        set(CMAKE_CXX_COMPILER  "clang++-3.5")
        set(CMAKE_SHARED_LINKER_FLAGS "--no-undefined " )
    endif()
    set(DL_LIBRARIES "dl")
    set(BUILD_SHARED_LIBS "OFF")
    INCLUDE_DIRECTORIES(c:/boost_1_55_0/lib64-msvc-12.0/)
    LINK_DIRECTORIES(c:/boost_1_55_0/lib64-msvc-12.0)
endif(NOT WIN32)


find_package( Boost  COMPONENTS system program_options filesystem thread REQUIRED )
include_directories( ${Boost_INCLUDE_DIR} )
message(STATUS "Boost INCLUDE DIR IS: " ${Boost_INCLUDE_DIR})


find_package(LibXml2 REQUIRED) 
message(STATUS "LibXML2 INCLUDE DIR IS: " ${LIBXML2_INCLUDE_DIR})
include_directories( ${LIBXML2_INCLUDE_DIR} )


set(FREEOPCUADIR ${CMAKE_SOURCE_DIR}/reps/freeopcua)
set(FREEOPCUASRC ${CMAKE_SOURCE_DIR}/reps/freeopcua/src)
set(FREEOPCUAINCLUDE ${CMAKE_SOURCE_DIR}/reps/freeopcua/include)
set(FREEOPCUATESTS ${CMAKE_SOURCE_DIR}/reps/freeopcua/tests)
set(FREEOPCUAEXAMPLES ${CMAKE_SOURCE_DIR}/reps/freeopcua/src/examples/)

include_directories( ${FREEOPCUAINCLUDE})
set(MAPPINGSDIR ${FREEOPCUASRC}/protocol)
set(COREDIR ${FREEOPCUASRC}/core)
set(CLIENTDIR ${FREEOPCUASRC}/client)
set(SERVERDIR ${FREEOPCUASRC}/server)
set(PYTHONDIR ${CMAKE_SOURCE_DIR}/reps/opcua-python)

#FIXME: looke like freeopcua rep now include gmock and gtest!!!
if(BUILD_TESTS)
    find_package(GTest)
    if(GTEST_FOUND)
        MESSAGE(STATUS "GTest found, building tests")
        enable_testing()
        include_directories(${GTEST_INCLUDE_DIRS})
    else()
        MESSAGE(STATUS "GTest NOT found, Not building tests")
        set(BUILD_TESTS OFF)
    endif()
endif()



if(WIN32) #include headers in windows for VS
	file(GLOB HEADERS ${FREEOPCUADIR}/include/opc/ua/*.h )
	file(GLOB PROTOCOL_HEADERS ${FREEOPCUADIR}/include/opc/ua/protocol/*.h )
	file(GLOB CLIENT_HEADERS ${FREEOPCUADIR}/include/opc/ua/client/*.h )
	file(GLOB SERVER_HEADERS ${FREEOPCUADIR}/include/opc/ua/server/*.h )
	file(GLOB SERVICES_HEADERS ${FREEOPCUADIR}/include/opc/ua/services/*.h )
endif(WIN32)

if(BUILD_PROTOCOL)
    message(STATUS "Building Mappings")
    include(${CMAKE_CURRENT_SOURCE_DIR}/src/Protocol.cmake)
    #add_subdirectory (protocol) 
    if(BUILD_TESTS)
        add_test("OPC-UAMappings" ${PROJECT_BINARY_DIR}/mappings/opcuabinary_tests )
        set(TEST_MAPPINGS_DEPEND opcuabinary_tests)
    endif(BUILD_TESTS)
endif(BUILD_PROTOCOL)
if(BUILD_CORE)
    message(STATUS "Building Core")
    include(${CMAKE_CURRENT_SOURCE_DIR}/src/Core.cmake)
    #add_subdirectory (core) 
    if(BUILD_TESTS)
        add_test("OPC-UACore" ${PROJECT_BINARY_DIR}/core/opcuacore_tests )
        set(TEST_CORE_DEPEND opcuacore_tests)
    endif(BUILD_TESTS)
endif(BUILD_CORE)
if(BUILD_CLIENT)
    message(STATUS "Building Client")
    include(${CMAKE_CURRENT_SOURCE_DIR}/src/Client.cmake)
    #add_subdirectory (client) 
    if(BUILD_TESTS)
    endif(BUILD_TESTS)
endif(BUILD_CLIENT)
if(BUILD_SERVER)
    message(STATUS "Building Server")
    include(${CMAKE_CURRENT_SOURCE_DIR}/src/Server.cmake)
    #add_subdirectory (server) 
    if(BUILD_TESTS)
    endif(BUILD_TESTS)
endif(BUILD_SERVER)
if(BUILD_PYTHON)
    message(STATUS "Building Python")
    include(${CMAKE_CURRENT_SOURCE_DIR}/src/Python.cmake)
    #add_subdirectory (python) 
    if(BUILD_TESTS)
        add_test("PythonTests" python3 ${PYTHONDIR}/tests/test_highlevel.py) 
        #find_package(PythonInterp REQUIRED ) #cmake only find python2 ?!?!?
        #add_test("PythonTests" ${PYTHON_EXECUTABLE} ${PYTHONDIR}/tests/test_highlevel.py) 
    endif(BUILD_TESTS)
endif(BUILD_PYTHON)

if(BUILD_TESTS)
    add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure DEPENDS ${TEST_MAPPINGS_DEPEND} ${OPCUA_CORE_DEPEND})
endif()

